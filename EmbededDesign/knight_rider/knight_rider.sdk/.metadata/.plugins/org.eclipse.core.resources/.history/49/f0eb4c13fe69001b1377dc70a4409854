/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xtmrctr.h"
#include "xscugic.h"
#include "xil_exception.h"

//Parameters Definitions
#define BTNS_DEVICE_ID XPAR_AXI_GPIO_0_DEVICE_ID
#define LEDS_DEVICE_ID XPAR_AXI_GPIO_1_DEVICE_ID
#define INTC_DEVICE_ID XPAR_PS7_SCUGIC_0_DEVICE_ID
#define TMR_DEVICE_ID XPAR_TMRCTR_0_DEVICE_ID

#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR
#define INTC_TMR_INTERRUPT_ID XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR

#define BTN_INT XGPIO_IR_CH1_MASK
#define TMR_LOAD 0xFF000000

XGpio LEDInst, BTNInst;
XScuGic INTCInst;
XTmrCtr TMRInst;
static int led_data = 1;
static int btn_value = 1;
static int l2r = 0;
static int r2l = 1;

//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static void TMR_Intr_Handler(void *baseaddr_p);

void BTN_Intr_Handler(void *InstancePtr){
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);

	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) != BTN_INT) {
		return;
	}
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	// right to left and left to right
	if (btn_value == 1){
		printf("BTN 1 pressed \n\r");//print seconds to uart
		r2l = 1; l2r = 0;

	} else if(btn_value == 2){
		r2l = 0; l2r = 1;
	}
	XGpio_DiscreteWrite(&LEDInst, 1, led_data);
	(void)XGpio_InterruptClear(&BTNInst, BTN_INT);
	// Enable GPIO interrupts
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
}

void TMR_Intr_Handler(void *data){

	if (XTmrCtr_IsExpired(&TMRInst,0)){
		// Once timer has expired, stop change led_data
		// reset timer and start running again
		XTmrCtr_Stop(&TMRInst,0);
		 if (l2r == 1){
			 led_data = (led_data * 2);
			 if (led_data == 16) led_data= 1;
		 }else if (r2l == 1){

			 led_data = (led_data / 2);
			 if(led_data == 0) led_data= 8;
		 }
		XGpio_DiscreteWrite(&LEDInst, 1, led_data);
		XTmrCtr_Reset(&TMRInst,0);
		XTmrCtr_Start(&TMRInst,0);
	}
}

int main()
{
	int status;
	XScuGic_Config *IntcConfig;
	 //----------------------------------------------------
	 // INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	 //----------------------------------------------------
	 // Initialize LEDs
	 status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
	 if(status != XST_SUCCESS) return XST_FAILURE;
	 // Set LEDs direction to outputs
	 XGpio_SetDataDirection(&LEDInst, 1, 0x00);


	 //------------------------------------------BUTTONS------------------------------------------------------
	 // Initialize Push Buttons
	 status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	 if(status != XST_SUCCESS) return XST_FAILURE;

	 // Set all buttons direction to inputs
	 XGpio_SetDataDirection(&BTNInst, 1, 0xFF);


	 //-------------------------------------Initialize Interrupt-------------------------------
	 IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	 status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	 if(status != XST_SUCCESS) return XST_FAILURE;

	 Xil_ExceptionInit();
	 Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);
	 Xil_ExceptionEnable();

	 //Connect interrupt - GPIO
	 status = XScuGic_Connect(&INTCInst,INTC_GPIO_INTERRUPT_ID, (Xil_ExceptionHandler)BTN_Intr_Handler, (void *)&BTNInst);
	 if(status != XST_SUCCESS) return XST_FAILURE;
	 XGpio_InterruptEnable(&BTNInst, BTN_INT);
	 XGpio_InterruptGlobalEnable(&BTNInst);
	 Xil_ExceptionEnable();

	 //------------------------------------------Initialize THE TIMER-----------------------------------------------------
	 //Initialize timer
	 status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);
	 if(status != XST_SUCCESS) return XST_FAILURE;

	 XTmrCtr_SetHandler(&TMRInst, TMR_Intr_Handler, &TMRInst);
	 XTmrCtr_SetResetValue(&TMRInst, 0, TMR_LOAD);
	 XTmrCtr_SetOptions(&TMRInst, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	 Xil_ExceptionInit();
	 Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);

	 // Connect interrupt - TIMER
	 status = XScuGic_Connect(&INTCInst, INTC_TMR_INTERRUPT_ID, (Xil_ExceptionHandler)TMR_Intr_Handler, (void *) &TMRInst);
	 if(status != XST_SUCCESS) return XST_FAILURE;
	 XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);
	 Xil_ExceptionEnable();

	 //------------------------------------------ENABLE Interrupts---------------------------------------------------


	 //Enable GPIO and timer interrupts in the controller
	 XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);
	 XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);

	 XTmrCtr_Start(&TMRInst, 0);
	 while(1);
	 return 0;
}
